// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: room_layer_sprite.proto

package room

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RoomLayerSprite struct {
	Config  *RoomLayerConfig    `protobuf:"bytes,1,opt,name=Config" json:"Config,omitempty"`
	Sprites []*RoomSpriteObject `protobuf:"bytes,2,rep,name=Sprites" json:"Sprites,omitempty"`
	// Room Editor only
	DeletedSprites []*RoomSpriteObject `protobuf:"bytes,3,rep,name=DeletedSprites" json:"DeletedSprites,omitempty"`
}

func (m *RoomLayerSprite) Reset()                    { *m = RoomLayerSprite{} }
func (m *RoomLayerSprite) String() string            { return proto.CompactTextString(m) }
func (*RoomLayerSprite) ProtoMessage()               {}
func (*RoomLayerSprite) Descriptor() ([]byte, []int) { return fileDescriptorRoomLayerSprite, []int{0} }

func (m *RoomLayerSprite) GetConfig() *RoomLayerConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *RoomLayerSprite) GetSprites() []*RoomSpriteObject {
	if m != nil {
		return m.Sprites
	}
	return nil
}

func (m *RoomLayerSprite) GetDeletedSprites() []*RoomSpriteObject {
	if m != nil {
		return m.DeletedSprites
	}
	return nil
}

func init() {
	proto.RegisterType((*RoomLayerSprite)(nil), "room.RoomLayerSprite")
}
func (m *RoomLayerSprite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomLayerSprite) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRoomLayerSprite(dAtA, i, uint64(m.Config.Size()))
		n1, err := m.Config.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Sprites) > 0 {
		for _, msg := range m.Sprites {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRoomLayerSprite(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DeletedSprites) > 0 {
		for _, msg := range m.DeletedSprites {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintRoomLayerSprite(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintRoomLayerSprite(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RoomLayerSprite) Size() (n int) {
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovRoomLayerSprite(uint64(l))
	}
	if len(m.Sprites) > 0 {
		for _, e := range m.Sprites {
			l = e.Size()
			n += 1 + l + sovRoomLayerSprite(uint64(l))
		}
	}
	if len(m.DeletedSprites) > 0 {
		for _, e := range m.DeletedSprites {
			l = e.Size()
			n += 1 + l + sovRoomLayerSprite(uint64(l))
		}
	}
	return n
}

func sovRoomLayerSprite(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRoomLayerSprite(x uint64) (n int) {
	return sovRoomLayerSprite(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RoomLayerSprite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomLayerSprite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomLayerSprite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomLayerSprite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomLayerSprite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoomLayerSprite
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &RoomLayerConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sprites", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomLayerSprite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoomLayerSprite
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sprites = append(m.Sprites, &RoomSpriteObject{})
			if err := m.Sprites[len(m.Sprites)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedSprites", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomLayerSprite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoomLayerSprite
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedSprites = append(m.DeletedSprites, &RoomSpriteObject{})
			if err := m.DeletedSprites[len(m.DeletedSprites)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoomLayerSprite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomLayerSprite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRoomLayerSprite(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRoomLayerSprite
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoomLayerSprite
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoomLayerSprite
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRoomLayerSprite
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRoomLayerSprite
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRoomLayerSprite(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRoomLayerSprite = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRoomLayerSprite   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("room_layer_sprite.proto", fileDescriptorRoomLayerSprite) }

var fileDescriptorRoomLayerSprite = []byte{
	// 187 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2f, 0xca, 0xcf, 0xcf,
	0x8d, 0xcf, 0x49, 0xac, 0x4c, 0x2d, 0x8a, 0x2f, 0x2e, 0x28, 0xca, 0x2c, 0x49, 0xd5, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0x49, 0x48, 0x49, 0x80, 0xa5, 0x21, 0x12, 0xf1, 0xf9, 0x49,
	0x59, 0xa9, 0xc9, 0x25, 0x10, 0x79, 0x29, 0x64, 0x8d, 0xc9, 0xf9, 0x79, 0x69, 0x99, 0xe9, 0x10,
	0x09, 0xa5, 0x4d, 0x8c, 0x5c, 0xfc, 0x41, 0xf9, 0xf9, 0xb9, 0x3e, 0x20, 0xa9, 0x60, 0xb0, 0x4e,
	0x21, 0x5d, 0x2e, 0x36, 0x67, 0xb0, 0x1a, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x6e, 0x23, 0x51, 0x3d,
	0x90, 0x6e, 0x3d, 0xb8, 0x32, 0x88, 0x64, 0x10, 0x54, 0x91, 0x90, 0x01, 0x17, 0x3b, 0x44, 0x63,
	0xb1, 0x04, 0x93, 0x02, 0xb3, 0x06, 0xb7, 0x91, 0x18, 0x42, 0x3d, 0x44, 0xc2, 0x1f, 0xec, 0x94,
	0x20, 0x98, 0x32, 0x21, 0x3b, 0x2e, 0x3e, 0x97, 0xd4, 0x9c, 0xd4, 0x92, 0xd4, 0x14, 0x98, 0x46,
	0x66, 0xbc, 0x1a, 0xd1, 0x54, 0x3b, 0x09, 0x9c, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3,
	0x83, 0x47, 0x72, 0x8c, 0x33, 0x1e, 0xcb, 0x31, 0x24, 0xb1, 0x81, 0x7d, 0x63, 0x0c, 0x08, 0x00,
	0x00, 0xff, 0xff, 0x6b, 0x42, 0x8b, 0x1a, 0x21, 0x01, 0x00, 0x00,
}
