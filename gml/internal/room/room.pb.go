// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: room.proto

/*
	Package room is a generated protocol buffer package.

	It is generated from these files:
		room.proto
		room_config.proto
		room_layer_background.proto
		room_layer_config.proto
		room_layer_instance.proto
		room_layer_kind.proto
		room_layer_sprite.proto
		room_object.proto
		room_sprite_object.proto

	It has these top-level messages:
		Room
		RoomConfig
		RoomLayerBackground
		RoomLayerConfig
		RoomLayerInstance
		RoomLayerSprite
		RoomObject
		RoomSpriteObject
*/
package room

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Room struct {
	Config *RoomConfig `protobuf:"bytes,1,opt,name=Config" json:"Config,omitempty"`
	Left   int32       `protobuf:"varint,2,opt,name=Left,proto3" json:"Left,omitempty"`
	Right  int32       `protobuf:"varint,3,opt,name=Right,proto3" json:"Right,omitempty"`
	Top    int32       `protobuf:"varint,4,opt,name=Top,proto3" json:"Top,omitempty"`
	Bottom int32       `protobuf:"varint,5,opt,name=Bottom,proto3" json:"Bottom,omitempty"`
	// Layers
	InstanceLayers   []*RoomLayerInstance   `protobuf:"bytes,6,rep,name=InstanceLayers" json:"InstanceLayers,omitempty"`
	BackgroundLayers []*RoomLayerBackground `protobuf:"bytes,7,rep,name=BackgroundLayers" json:"BackgroundLayers,omitempty"`
	SpriteLayers     []*RoomLayerSprite     `protobuf:"bytes,8,rep,name=SpriteLayers" json:"SpriteLayers,omitempty"`
	DeletedLayers    []string               `protobuf:"bytes,9,rep,name=DeletedLayers" json:"DeletedLayers,omitempty"`
}

func (m *Room) Reset()                    { *m = Room{} }
func (m *Room) String() string            { return proto.CompactTextString(m) }
func (*Room) ProtoMessage()               {}
func (*Room) Descriptor() ([]byte, []int) { return fileDescriptorRoom, []int{0} }

func (m *Room) GetConfig() *RoomConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *Room) GetLeft() int32 {
	if m != nil {
		return m.Left
	}
	return 0
}

func (m *Room) GetRight() int32 {
	if m != nil {
		return m.Right
	}
	return 0
}

func (m *Room) GetTop() int32 {
	if m != nil {
		return m.Top
	}
	return 0
}

func (m *Room) GetBottom() int32 {
	if m != nil {
		return m.Bottom
	}
	return 0
}

func (m *Room) GetInstanceLayers() []*RoomLayerInstance {
	if m != nil {
		return m.InstanceLayers
	}
	return nil
}

func (m *Room) GetBackgroundLayers() []*RoomLayerBackground {
	if m != nil {
		return m.BackgroundLayers
	}
	return nil
}

func (m *Room) GetSpriteLayers() []*RoomLayerSprite {
	if m != nil {
		return m.SpriteLayers
	}
	return nil
}

func (m *Room) GetDeletedLayers() []string {
	if m != nil {
		return m.DeletedLayers
	}
	return nil
}

func init() {
	proto.RegisterType((*Room)(nil), "room.Room")
}
func (m *Room) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Room) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Config.Size()))
		n1, err := m.Config.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Left != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Left))
	}
	if m.Right != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Right))
	}
	if m.Top != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Top))
	}
	if m.Bottom != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Bottom))
	}
	if len(m.InstanceLayers) > 0 {
		for _, msg := range m.InstanceLayers {
			dAtA[i] = 0x32
			i++
			i = encodeVarintRoom(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.BackgroundLayers) > 0 {
		for _, msg := range m.BackgroundLayers {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintRoom(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.SpriteLayers) > 0 {
		for _, msg := range m.SpriteLayers {
			dAtA[i] = 0x42
			i++
			i = encodeVarintRoom(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DeletedLayers) > 0 {
		for _, s := range m.DeletedLayers {
			dAtA[i] = 0x4a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintRoom(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Room) Size() (n int) {
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovRoom(uint64(l))
	}
	if m.Left != 0 {
		n += 1 + sovRoom(uint64(m.Left))
	}
	if m.Right != 0 {
		n += 1 + sovRoom(uint64(m.Right))
	}
	if m.Top != 0 {
		n += 1 + sovRoom(uint64(m.Top))
	}
	if m.Bottom != 0 {
		n += 1 + sovRoom(uint64(m.Bottom))
	}
	if len(m.InstanceLayers) > 0 {
		for _, e := range m.InstanceLayers {
			l = e.Size()
			n += 1 + l + sovRoom(uint64(l))
		}
	}
	if len(m.BackgroundLayers) > 0 {
		for _, e := range m.BackgroundLayers {
			l = e.Size()
			n += 1 + l + sovRoom(uint64(l))
		}
	}
	if len(m.SpriteLayers) > 0 {
		for _, e := range m.SpriteLayers {
			l = e.Size()
			n += 1 + l + sovRoom(uint64(l))
		}
	}
	if len(m.DeletedLayers) > 0 {
		for _, s := range m.DeletedLayers {
			l = len(s)
			n += 1 + l + sovRoom(uint64(l))
		}
	}
	return n
}

func sovRoom(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRoom(x uint64) (n int) {
	return sovRoom(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Room) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Room: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Room: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &RoomConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Left", wireType)
			}
			m.Left = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Left |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Right", wireType)
			}
			m.Right = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Right |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Top", wireType)
			}
			m.Top = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Top |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bottom", wireType)
			}
			m.Bottom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bottom |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceLayers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceLayers = append(m.InstanceLayers, &RoomLayerInstance{})
			if err := m.InstanceLayers[len(m.InstanceLayers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackgroundLayers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackgroundLayers = append(m.BackgroundLayers, &RoomLayerBackground{})
			if err := m.BackgroundLayers[len(m.BackgroundLayers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpriteLayers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpriteLayers = append(m.SpriteLayers, &RoomLayerSprite{})
			if err := m.SpriteLayers[len(m.SpriteLayers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedLayers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedLayers = append(m.DeletedLayers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRoom(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRoom
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRoom
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRoom(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRoom = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRoom   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("room.proto", fileDescriptorRoom) }

var fileDescriptorRoom = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x71, 0x93, 0x06, 0x7a, 0x05, 0x14, 0x2c, 0xa0, 0x6e, 0x91, 0xa2, 0x08, 0x31, 0x64,
	0xea, 0x50, 0x26, 0x26, 0xa4, 0x02, 0x03, 0x52, 0x27, 0xc3, 0x5e, 0xb5, 0xc1, 0x0d, 0x11, 0x4d,
	0x2e, 0x4a, 0xcc, 0xc0, 0x9b, 0xf0, 0x48, 0x8c, 0x3c, 0x02, 0x0a, 0x33, 0xef, 0x80, 0x72, 0x71,
	0x69, 0x1b, 0x96, 0xe8, 0xfc, 0x7f, 0xbf, 0xff, 0xbb, 0x8b, 0x01, 0x72, 0xc4, 0x64, 0x98, 0xe5,
	0xa8, 0x91, 0xdb, 0x55, 0x3d, 0x38, 0xaa, 0xbe, 0xd3, 0x10, 0xd3, 0x45, 0x1c, 0xd5, 0x60, 0xd0,
	0x27, 0x69, 0x39, 0x7b, 0x53, 0xf9, 0x34, 0x4e, 0x0b, 0x3d, 0x4b, 0x43, 0x65, 0xd0, 0xd9, 0x06,
	0x9a, 0xcf, 0xc2, 0x97, 0x28, 0xc7, 0xd7, 0xf4, 0xc9, 0xc0, 0xde, 0x06, 0x2c, 0xb2, 0x3c, 0xd6,
	0xe6, 0xd6, 0xf9, 0x4f, 0x0b, 0x6c, 0x89, 0x98, 0xf0, 0x00, 0x9c, 0x1b, 0xea, 0x24, 0x98, 0xcf,
	0x82, 0xee, 0xc8, 0x1d, 0xd2, 0x3c, 0x15, 0xab, 0x75, 0x69, 0x38, 0xe7, 0x60, 0x4f, 0xd4, 0x42,
	0x8b, 0x96, 0xcf, 0x82, 0xb6, 0xa4, 0x9a, 0x1f, 0x43, 0x5b, 0xc6, 0xd1, 0xb3, 0x16, 0x16, 0x89,
	0xf5, 0x81, 0xbb, 0x60, 0x3d, 0x62, 0x26, 0x6c, 0xd2, 0xaa, 0x92, 0x9f, 0x82, 0x33, 0x46, 0xad,
	0x31, 0x11, 0x6d, 0x12, 0xcd, 0x89, 0x5f, 0xc3, 0xe1, 0xbd, 0x59, 0x67, 0x52, 0x0d, 0x59, 0x08,
	0xc7, 0xb7, 0x82, 0xee, 0xa8, 0xb7, 0x9e, 0x82, 0xf4, 0x95, 0x49, 0x36, 0xec, 0xfc, 0x0e, 0xdc,
	0xf1, 0xdf, 0xd2, 0x26, 0x62, 0x97, 0x22, 0xfa, 0x8d, 0x88, 0xb5, 0x4d, 0xfe, 0xbb, 0xc2, 0xaf,
	0x60, 0xff, 0x81, 0x7e, 0x8f, 0x89, 0xd8, 0xa3, 0x88, 0x93, 0x46, 0x44, 0x6d, 0x91, 0x5b, 0x56,
	0x7e, 0x01, 0x07, 0xb7, 0x6a, 0xa9, 0xb4, 0x5a, 0xb5, 0xef, 0xf8, 0x56, 0xd0, 0x91, 0xdb, 0xe2,
	0xd8, 0xfd, 0x28, 0x3d, 0xf6, 0x59, 0x7a, 0xec, 0xab, 0xf4, 0xd8, 0xfb, 0xb7, 0xb7, 0x33, 0x77,
	0xe8, 0x21, 0x2e, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x15, 0x8d, 0x3d, 0x6a, 0x00, 0x02, 0x00,
	0x00,
}
