package audio

import (
	"io"

	"github.com/hajimehoshi/ebiten/audio"
	"github.com/hajimehoshi/ebiten/audio/mp3"
	"github.com/hajimehoshi/ebiten/audio/wav"
	"github.com/silbinarywolf/gml-go/gml/internal/file"
)

type SoundIndex int32

// Play will play a sound
func (index SoundIndex) Play() {
	sound := &soundManager.assetList[index]
	if sound.audioPlayer == nil {
		panic("Sound isn't loaded")
	}
	sound.audioPlayer.Rewind()
	sound.audioPlayer.Play()
}

// Stop will stop playing a sound
func (index SoundIndex) Stop() {
	sound := &soundManager.assetList[index]
	if sound.audioPlayer == nil {
		panic("Sound isn't loaded")
	}
	sound.audioPlayer.Pause()
}

const (
	sampleRate         = 48000
	SoundDirectoryBase = "sound"
)

var (
	audioContext *audio.Context
)

type soundManagerData struct {
	assetList        []sound
	assetNameToIndex map[string]SoundIndex
	assetIndexToName []string
}

var (
	soundManager = &soundManagerData{}
)

type sound struct {
	data        io.ReadCloser
	audioPlayer *audio.Player
}

func loadSound(index SoundIndex) {
	name := soundManager.assetIndexToName[index]
	// todo(Jake): 2019-02-02
	// Think about how to know about the type of sound file before hand
	// either pack it into a zip/asset packer or maybe use "gmlgo generate" to
	// determine the type.
	path := file.AssetDirectory + "/" + SoundDirectoryBase + "/" + name + "/sound.wav"
	f, err := file.OpenFile(path)
	sound := sound{}
	if err != nil {
		// Fallback to MP3
		path := file.AssetDirectory + "/" + SoundDirectoryBase + "/" + name + "/sound.mp3"
		f, err = file.OpenFile(path)
		if err != nil {
			panic(err)
		}
		d, err := mp3.Decode(audioContext, f)
		if err != nil {
			panic(err)
		}
		sound.data = d
	} else {
		// Load WAV
		d, err := wav.Decode(audioContext, f)
		if err != nil {
			panic(err)
		}
		sound.data = d
	}
	sound.audioPlayer, err = audio.NewPlayer(audioContext, sound.data)
	if err != nil {
		panic(err)
	}
	soundManager.assetList[index] = sound
}

// InitAndLoadAllSprites is used by gmlgo when initializing the engine
func InitAndLoadAllSprites() error {
	var err error
	audioContext, err = audio.NewContext(sampleRate)
	if err != nil {
		return err
	}
	// Load all sounds
	for _, soundIndex := range soundManager.assetNameToIndex {
		loadSound(soundIndex)
	}
	return nil
}

// InitSoundGeneratedData is used by code generated by gmlgo so you can query a sound by index or name
func InitSoundGeneratedData(indexToName []string, nameToIndex map[string]SoundIndex) {
	soundManager.assetIndexToName = indexToName
	soundManager.assetNameToIndex = nameToIndex
	soundManager.assetList = make([]sound, len(soundManager.assetIndexToName))
}
