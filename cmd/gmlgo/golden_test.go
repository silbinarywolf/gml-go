package main

import (
	"strings"
	"testing"
)

// Golden represents a test case.
type Golden struct {
	name   string
	input  string // input; the package clause is provided when running the test.
	output string // exected output.
}

var golden = []Golden{
	{"simple", simple_in, simple_out},
}

// Each example starts with "type XXX [u]int", with a single space separating them.

// Simple test: enumeration of type int starting at 0.
const simple_in = `
import (
	"github.com/silbinarywolf/gml-go/gml"
)

type GameObjectA struct {
	gml.Object
}
`

const simple_out = `
// Code generated by "gmlgo"
// 0.1.0
// DO NOT EDIT. DO NOT COMMIT TO YOUR VCS REPOSITORY.

package test

import (
	"github.com/silbinarywolf/gml-go/gml"
)

const (
	ObjGameObjectA gml.ObjectIndex = 1
)

var _gen_Obj_index_to_name = []string{
	ObjGameObjectA: "GameObjectA",
}

var _gen_Obj_name_to_index = map[string]gml.ObjectIndex{
	"GameObjectA": ObjGameObjectA,
}

var _gen_Obj_index_to_data = []gml.ObjectType{
	ObjGameObjectA: new(GameObjectA),
}

func init() {
	gml.InitObjectGeneratedData(_gen_Obj_index_to_name, _gen_Obj_name_to_index, _gen_Obj_index_to_data)
}
`

func TestGolden(t *testing.T) {
	for _, test := range golden {
		g := Generator{}
		input := "package test\n" + test.input
		file := test.name + ".go"
		g.parsePackage(".", []string{file}, input)
		g.generate()
		got := strings.TrimSpace(string(g.format()))
		expected := strings.TrimSpace(test.output)
		if got != expected {
			t.Errorf("%s: got\n====\n%s====\nexpected\n====\n%s", test.name, got, expected)
		}
	}
}
